View(prices)
View(pib_countries)
bndes <- read.csv("http://api.bcb.gov.br/dados/serie/bcdata.sgs.7415/dados?formato=csv&dataInicial=01/01/2010&dataFinal=31/12/2020",
sep = ";")
View(bndes)
library(haven)
notas_fatorial <- read_sav("01 - data/(2) notas_fatorial.sav")
View(notas_fatorial)
# load data from sav
library(haven)
notas_fatorial <- read_sav("01 - data/(2) notas_fatorial.sav")
View(notas_fatorial)
notas_fatorial <- read_sav("01 - data/(2) notas_fatorial.sav")
load("C:/Users/usuario/Desktop/Data Science - Study/01 - data/(2) atlas_ambiental.RData")
view(atlas_ambiental)
View(atlas_ambiental)
data_base_1 <- data.frame(var1 = c("person 1", "person 2", "person 3"),
var2 = c(42, 55, 28))
var1 <- c(1:10)
var2 <- c(11:18, NA, NA)
var3 <- c("a","b","c","d","e","f","g","h","i","j")
data_base_2 <- data.frame(var1, var2, var3)
data_base_3 <- data.frame(position = var1,
missing = var2,
letters = var3)
View(data_base_1)
View(data_base_2)
View(data_base_3)
# use save to save in Rdata format
save(data_base_1, file = "01 - data/(3) saved_data_1.RData")
install.packages("writexl")
library("writexl")
write_xlsx(data_base_2,"01 - data/(3) saved_data_2.xlsx")
write.csv(data_base_3, file = "01 - data/(3) saved_data_3.csv", row.names = F)
load("(2) desempenho_aluno_escola.RData")
load("01 - data/(2) desempenho_aluno_escola.RData")
View(desempenho_aluno_escola)
View(desempenho_aluno_escola)
write.csv(data_base_3, file = "01 - data/(3) saved_data_3.csv", row.names = T)
# the comannd row.names stands for the index
write.csv(data_base_3, file = "01 - data/(3) saved_data_3.csv", row.names = F)
write.csv(data_base_3, file = "01 - data/(3) saved_data_3.csv", row.names = T)
write.csv(data_base_3, file = "01 - data/(3) saved_data_4.csv", row.names = T)
load("01 - data/(2) desempenho_aluno_escola.RData")
# Get a look on the initial part of the data (10 first lines)
head(desempenho_aluno_escola, n = 10)
object_test <- head(desempenho_aluno_escola, n = 10)
View(object_test)
View(object_test)
# What are the variables name avilable?
names(desempenho_aluno_escola)
# What are the variables name available?
columns_names = names(desempenho_aluno_escola)
# What are the variables name available?
columns_names <-  names(desempenho_aluno_escola)
nrow(desempenho_aluno_escola) # row number
ncol(desempenho_aluno_escola) # columns number
dim(desempenho_aluno_escola) # lines and columns number
str(desempenho_aluno_escola)
desempenho_aluno_escola$desempenho # print the variable
study_time <- desempenho_aluno_escola$horas # store into a vector
rm(study_time)
# Qual é o valor do desempenho escolar (variável na 3ª coluna) do 1º aluno?
desempenho_aluno_escola[1 , 3]
# What are the values of all variables of the 5th student?
desempenho_aluno_escola[5 , ]
# What are the values of all variables for the students from 7th to 12nd?
desempenho_aluno_escola[c(7:12), ]
# what are all observations for the 6th variable?
desempenho_aluno_escola[ , 6]
# No caso acima, também poderia ser indicada pelo nome da variável
desempenho_aluno_escola[ , "priv"]
class(desempenho_aluno_escola)
View(object_test)
View(object_test)
View(object_test)
View(object_test)
View(desempenho_aluno_escola)
View(desempenho_aluno_escola)
View(desempenho_aluno_escola)
# We can rearrange the data frame
reorganiza <- desempenho_aluno_escola[ , c(2,5,3,4,1,6)]
View(reorganiza)
# We can rearrange the data frame
reorganize <- desempenho_aluno_escola[ , c(2,5,3,4,1,6)]
# Let's take only few columns
part_of_data <- desempenho_aluno_escola[ , c("estudante", "desempenho", "horas")]
View(part_of_data)
# Exclude the 4th and 5th column
new_data_1 <- desempenho_aluno_escola[ , -c(4,5)]
View(new_data_1)
# Exclude lines from 476 to 522
new_data_2 <- desempenho_aluno_escola[ -c(476:522), ]
View(new_data_2)
]
-c(476:522)
-c(476:522)+c(476:522)
desempenho_aluno_escola$desempenho
desempenho_aluno_escola[desempenho_aluno_escola$desempenho > 50,]
performance <- desempenho_aluno_escola[desempenho_aluno_escola$desempenho > 50,]
View(performance)
desempenho_aluno_escola[desempenho_aluno_escola$priv == "pública",]
desempenho_aluno_escola[desempenho_aluno_escola$priv == "pública" &
desempenho_aluno_escola$desempenho <= 20,]
desempenho_aluno_escola[desempenho_aluno_escola$escola != "A",]
seleciona_escolas <- desempenho_aluno_escola[desempenho_aluno_escola$escola == "C" |
desempenho_aluno_escola$escola == "H",]
View(seleciona_escolas)
View(seleciona_escolas)
select_schools <- desempenho_aluno_escola[desempenho_aluno_escola$escola == "C" |
desempenho_aluno_escola$escola == "H",]
pib_countries <- read.csv("01 - data/(2) pib_paises.csv",
sep = ",",
dec = ".")
View(pib_countries)
View(pib_countries)
pib_countries <- pib_paises[-c(267:271),-c(2,4)]
pib_countries <- pib_countries[-c(267:271),-c(2,4)]
View(pib_countries)
new_names <- c("ano","paises_regioes","var_pib_capita","var_pib_total")
names(pib_paises) <- new_names
names(pib_countries) <- new_names
pib_countries$var_pib_capita_ajust <- as.numeric(pib_countries$var_pib_capita)
pib_countries$var_pib_total_ajust <- as.numeric(pib_countries$var_pib_total)
summary(pib_countries$var_pib_capita_ajust)
summary(pib_countries$var_pib_total_ajust)
1j
1i
8i
atualizar <- function(histórico) {atual <- ((histórico + 17)/2) return(atual)}
return(atual)}
atualizar <- function(histórico) {
atual <- ((histórico + 17)/2)
return(atual)
}
atualizar <- function(histórico) {
atual <- ((histórico + 17)/2)
return(atual)
}
atualizar <- function(histórico) {
atual <- ((histórico + 17)/2)
return(atual)
}
atualizar (1)
atualizar(1)
atualizar(2)
atualizar (3)
atualizar (4)
atualizar_hoje <- c(1:15)
atualizar(atualizar_hoje)
ajustar <- function(valor1, valor2) {
ajuste <- ((valor1 + 180)/(valor2 - 60))
return(ajuste)
}
ajustar(100, 80)
ajustar(200, 80)
ajustar(200, 100)
ajustar2(200, 100)
return ((valor1 + 180)/(valor2 - 60))
ajustar(atualizar_hoje, atualizar_hoje)
pi
e
euler
valor <- 100000
if (valor >= 1000000) {
"big number"
} else {
"small number"
}
valor <- 650000
if (valor >= 1000000) {
"big number"
} else if (valor >= 500000 & valor <1000000) {
"intermidiate number"
} else {
"small number"
}
if (valor >= 1000000) {
"big number"
}if (valor >= 500000 & valor <1000000) {
if (valor >= 1000000) {
"big number"
} if (valor >= 500000 & valor <1000000) {
if (valor >= 1000000) {
"big number"
} else if (valor >= 500000 & valor <1000000) {
"intermidiate number"
} else {
"small number"
}
# function including if and else
atualizar_teto <- function(histórico) {
atual <- ((histórico + 17)/2)
if (atual <= 100) {
return(atual)}
else {
return("Atualizado no Teto = 100")}
}
atualizar_teto(44)
atualizar_teto(199)
ajustar_mult <- function(valor1, valor2) {
ajuste <- ((valor1 + 180)/(valor2 - 60))
if(ajuste <= 100) {
return("baixo")}
else if(ajuste > 100 & ajuste <= 1000) {
return("médio")}
else {
return("alto")}
}
ajustar_mult(500, 300) # result = 2,8333
ajustar_mult(50000,100) # result = 1.254,50
ajustar_mult(1000, 70) # result = 118
médias <- function(x) {
media <- mean(x, na.rm = T)
return(media)
}
valores <- c(1, 4, 6, 9, 12, 16)
médias(valores)
valores <- c(1, 4, 6, 9, 12, 16, NA)
médias(valores)
media <- mean(x, na.rm = F)
médias <- function(x) {
media <- mean(x, na.rm = F)
return(media)
}
valores <- c(1, 4, 6, 9, 12, 16, NA)
médias(valores)
médias <- function(x) {
media <- mean(x, na.rm = T)
return(media)
}
valores <- c(1, 4, 6, 9, 12, 16, NA)
médias(valores)
for (i in atualizar_hoje) {
print((i + 17)/2)
}
valores <- 2
while(valores < 100){
valores <- (valores + 20)
print(valores)
}
library(ggplot2)
install.packages(c("plotly","reshape2","ggrepel","rgl","car","sf","esquisse"))
library(plotly)
library(reshape2)
library(ggrepel)
library(rgl)
library(car)
library(sf)
library(esquisse)
options(rgl.debug = TRUE)
load("01 - data\(2) perfil_investidor.RData")
load("01 - data\ (2) perfil_investidor.RData")
load("01 - data/ (2) perfil_investidor.RData")
load("01 - data/ (2) perfil_investidor.RData")
load("01 - data/(2) perfil_investidor.RData")
View(perfil_investidor)
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil))
perfil_investidor$perfil <- factor(perfil_investidor$perfil,
levels = c("Conservador",
"Moderado",
"Agressivo"))
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil))
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil)) +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
colours()
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = 'red', fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = 'red', fill = "yellow1") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = 'red', fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = "red", fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020")
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = "red", fill = "blue") +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020") +
theme_light()
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = "red", fill = "blue") +
geom_text(aes(x = perfil, label = ..count..), stat = "count", vjust = 2) +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020") +
theme_light()
ggplot(data = perfil_investidor) +
geom_bar(aes(x = perfil), color = "red", fill = "blue") +
geom_text(aes(x = perfil, label = ..count..), stat = "count", hjust = -1) +
labs(title = "Perfil dos Investidores",
subtitle = "Banco X",
x = "Perfil do Investidor",
y = "Quantidade",
caption = "Período: 2020") +
coord_flip() +
theme_light()
load("01 - data/(2) desempenho_aluno_escola.RData")
ggplot(data = desempenho_aluno_escola) +
geom_histogram(aes(x = desempenho))
ggplot(data = desempenho_aluno_escola) +
geom_histogram(aes(x = desempenho), color = "black", fill = "light green") +
labs(x = "Desempenho Escolar",
y = "Frequência") +
theme_bw()
ggplot(data = desempenho_aluno_escola) +
geom_histogram(aes(x = desempenho), color = "black", fill = "light green", bins = 50) +
labs(x = "Desempenho Escolar",
y = "Frequência") +
theme_bw()
load("01 - data/(2) atlas_ambiental.RData")
load("01 - data/(2) atlas_ambiental.RData")
ggplot(atlas_ambiental) +
geom_point(aes(x = renda, y = escolaridade))
# add another variable in terms of points size
ggplot(atlas_ambiental) +
geom_point(aes(x = renda, y = escolaridade, size = idade))
# add another variable in terms of colors
ggplot(atlas_ambiental) +
geom_point(aes(x = renda, y = escolaridade, size = idade, color = favel < 6))
ggplot(atlas_ambiental) +
geom_point(aes(x = renda, y = escolaridade,
size = idade, color = favel < 6,
shape = mortalidade > 18)) +
labs(title = "Indicadores dos Distritos do Município de São Paulo",
x = "Renda",
y = "Escolaridade") +
theme_bw()
ggplot(atlas_ambiental) +
geom_point(aes(x = renda, y = escolaridade,
size = idade, color = favel < 6,
shape = mortalidade > 18)) +
geom_smooth(aes(x = renda, y = escolaridade), method = "loess", se = FALSE) +
labs(title = "Indicadores dos Distritos do Município de São Paulo",
x = "Renda",
y = "Escolaridade") +
theme_bw()
library(readxl)
preco_acao <- read_excel("(2) precos_acao.xlsx")
preco_acao <- read_excel("01 - data/(2) precos_acao.xlsx")
View(preco_acao)
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao))
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco))
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao))
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao)) +
labs(x = "Mês de Referência",
y = "Cotação de Fechamento",
title = "Série Histórica das Ações",
color = "Empresa") +
theme_classic()
#two graphs
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao)) +
geom_point(aes(x = data, y = preco, color = acao)) +
labs(x = "Mês de Referência",
y = "Cotação de Fechamento",
title = "Série Histórica das Ações",
color = "Empresa") +
theme_classic()
# add label to the points
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao)) +
geom_point(aes(x = data, y = preco, color = acao)) +
geom_text(aes(x = data, y = preco, label = preco), size = 3, vjust = 2, angle = 45) +
labs(x = "Mês de Referência",
y = "Cotação de Fechamento",
title = "Série Histórica das Ações",
color = "Empresa") +
theme_classic()
ggplotly(
ggplot(preco_acao) +
geom_line(aes(x = data, y = preco, color = acao)) +
geom_point(aes(x = data, y = preco, color = acao)) +
labs(x = "Mês de Referência",
y = "Cotação de Fechamento",
title = "Série Histórica das Ações",
color = "Empresa") +
theme_classic()
)
tempo_dist <- read_excel("01 - data/(2) tempo_dist.xls")
# Let's creae a matrix of correlation using cor function
# add only the quantitative variables into the graph
correlacoes <- cor(tempo_dist[, 2:4])
View(correlacoes)
View(atlas_ambiental)
View(tempo_dist)
correlacoes_reorg <- melt(correlacoes)
View(correlacoes_reorg)
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.")
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = value), size = 5) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.") +
scale_fill_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0)
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = value), size = 5) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.") +
scale_fill_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0.8)
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = value), size = 5) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.") +
scale_fill_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0)
ggplotly(
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = value), size = 5) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.") +
scale_fill_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0)
# Por fim, podemos deixar o gráfico mais interativo com a função "ggplotly"
)
load("01 - data/(2) atlas_ambiental.RData")
var_boxplot <- atlas_ambiental[,c(1,3)]
View(var_boxplot)
ggplot(var_boxplot) +
geom_boxplot(aes(y = renda), fill = "gray", color = "blue") +
labs(x = "Renda",
y = "Valores")
ggplotly(
ggplot(var_boxplot) +
geom_boxplot(aes(y = renda), fill = "gray", color = "blue") +
labs(x = "Renda",
y = "Valores")
)
midpoint = 0)
ggplotly(
ggplot(correlacoes_reorg) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = value), size = 5) +
labs(x = "Variáveis",
y = "Variáveis",
fill = "Coef. Correl.") +
scale_fill_gradient2(low = "blue",
mid = "yellow",
high = "red",
midpoint = 0)
)
esquisser(atlas_ambiental, viewer = "browser")
